#ifndef FLEX_HEADER_d_l_h
#define FLEX_HEADER_d_l_h
#define YY_Tlexer_CHAR unsigned char
#line 1 "./pars/flexskel.h"
/* A lexical scanner header generated by flex */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */


/*********************************************/
/* SYSTEM dependent declaration, includes... */
/*********************************************/
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
#ifdef __cplusplus
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#else	/* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#else
#endif	/* __GNUC__ */
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#endif	/* __STDC__ */
#endif	/* ! __cplusplus */
/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif
#include <stdio.h>




/* % here is the declaration from section1 %header{  */ 
#line 3 "./d.l"
#define YY_Tlexer_INHERIT  :public Tparser
#line 4 "./d.l"
#define YY_Tlexer_MEMBERS  \
	int seekback(Tchar[],int); \
	int AtEOF(); \
	int QuoteMeansChar;\
	istream* inputstreamptr; \
	int EofSeen; \
	virtual ~Tlexer();
#line 12 "./d.l"
#define YY_Tlexer_CONSTRUCTOR_PARAM  istream& is
#line 13 "./d.l"
#define YY_Tlexer_CONSTRUCTOR_CODE  QuoteMeansChar=1; inputstreamptr = &is; EofSeen = 0
#line 45 "./d.l"
#line 218 "./d.l"
#endif
#line 52 "./pars/flexskel.h"



#ifndef YY_Tlexer_TEXT
#define YY_Tlexer_TEXT yytext
#endif
#ifndef YY_Tlexer_LENG
#define YY_Tlexer_LENG yyleng
#endif
#ifndef YY_Tlexer_IN
#define YY_Tlexer_IN yyin
#endif
#ifndef YY_Tlexer_OUT
#define YY_Tlexer_OUT yyout
#endif
#ifndef YY_Tlexer_LEX_RETURN
#define YY_Tlexer_LEX_RETURN int
#else
#ifndef YY_Tlexer_LEX_DEFINED
#define YY_Tlexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_Tlexer_LEX
#define YY_Tlexer_LEX yylex
#else
#ifndef YY_Tlexer_LEX_DEFINED
#define YY_Tlexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_Tlexer_LEX_PARAM
#ifndef YY_USE_PROTOS
#define YY_Tlexer_LEX_PARAM 
#else
#define YY_Tlexer_LEX_PARAM void
#endif
#else
#ifndef YY_Tlexer_LEX_DEFINED
#define YY_Tlexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_Tlexer_LEX_PARAM_DEF
#define YY_Tlexer_LEX_PARAM_DEF
#else
#ifndef YY_Tlexer_LEX_DEFINED
#define YY_Tlexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_Tlexer_RESTART
#define YY_Tlexer_RESTART yyrestart
#endif
#ifndef YY_Tlexer_SWITCH_TO_BUFFER
#define YY_Tlexer_SWITCH_TO_BUFFER yy_switch_to_buffer
#endif
#ifndef YY_Tlexer_LOAD_BUFFER_STATE
#define YY_Tlexer_LOAD_BUFFER_STATE yy_load_buffer_state
#endif

#ifndef YY_Tlexer_CREATE_BUFFER
#define YY_Tlexer_CREATE_BUFFER yy_create_buffer
#ifndef YY_USE_CLASS
#ifndef yy_new_buffer
#define yy_new_buffer yy_create_buffer
#endif
#endif
#endif
#ifndef YY_Tlexer_DELETE_BUFFER
#define YY_Tlexer_DELETE_BUFFER yy_delete_buffer
#endif
#ifndef YY_Tlexer_INIT_BUFFER
#define YY_Tlexer_INIT_BUFFER yy_init_buffer
#endif
#ifdef YY_Tlexer_FLEX_DEBUG
#ifndef YY_Tlexer_DEBUG
#define YY_Tlexer_DEBUG 1
#endif
#else
#ifndef YY_Tlexer_DEBUG
#define YY_Tlexer_DEBUG 0
#endif
#endif

#if YY_Tlexer_DEBUG != 0
#ifndef YY_Tlexer_DEBUG_FLAG
#define YY_Tlexer_DEBUG_FLAG yy_flex_debug
#endif
#ifndef YY_Tlexer_DEBUG_INIT
#define YY_Tlexer_DEBUG_INIT 1
#endif
#endif




#ifndef YY_USE_CLASS
typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern void YY_Tlexer_RESTART YY_PROTO(( FILE *input_file ));
extern void YY_Tlexer_SWITCH_TO_BUFFER YY_PROTO(( YY_BUFFER_STATE new_buffer ));
extern void YY_Tlexer_LOAD_BUFFER_STATE YY_PROTO(( void ));
extern YY_BUFFER_STATE YY_Tlexer_CREATE_BUFFER YY_PROTO(( FILE *file, int size ));
extern void YY_Tlexer_DELETE_BUFFER YY_PROTO(( YY_BUFFER_STATE b ));
extern void YY_Tlexer_INIT_BUFFER YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#if YY_Tlexer_DEBUG != 0
extern int YY_Tlexer_DEBUG_FLAG ;
#endif
extern YY_Tlexer_CHAR  *YY_Tlexer_TEXT;
extern int YY_Tlexer_LENG;
extern FILE *YY_Tlexer_IN, *YY_Tlexer_OUT;
#ifdef YY_Tlexer_LEX_DEFINED
extern YY_Tlexer_LEX_RETURN YY_Tlexer_LEX ( YY_Tlexer_LEX_PARAM )
YY_Tlexer_LEX_PARAM_DEF
#else
#ifndef YY_DECL
extern YY_Tlexer_LEX_RETURN YY_Tlexer_LEX ( YY_Tlexer_LEX_PARAM )
YY_Tlexer_LEX_PARAM_DEF
#else
/* no declaration if oldstyle flex */
#endif
#endif
#else

#ifndef YY_Tlexer_CLASS
#define YY_Tlexer_CLASS Tlexer
#endif
#ifndef YY_Tlexer_ECHO
#define YY_Tlexer_ECHO yy_echo
#endif
#ifdef YY_Tlexer_ECHO_PURE
#define YY_Tlexer_ECHO_NOCODE
#endif
#ifndef YY_Tlexer_ECHO_CODE
#define YY_Tlexer_ECHO_CODE fwrite( (char *) YY_Tlexer_TEXT, YY_Tlexer_LENG, 1, YY_Tlexer_OUT );
#endif
#ifndef YY_Tlexer_INPUT
#define YY_Tlexer_INPUT yy_input
#endif
#ifdef YY_Tlexer_INPUT_PURE
#define YY_Tlexer_INPUT_NOCODE
#endif
#ifndef YY_Tlexer_INPUT_CODE
#define YY_Tlexer_INPUT_CODE return result= fread(  buffer, 1,max_size,YY_Tlexer_IN );
#endif
#ifdef YY_Tlexer_FATAL_ERROR_PURE
#define YY_Tlexer_FATAL_ERRO_NOCODE
#endif
#ifndef YY_Tlexer_FATAL_ERROR
#define YY_Tlexer_FATAL_ERROR yy_fatal_error
#endif
#ifndef YY_Tlexer_FATAL_ERROR_CODE
#define YY_Tlexer_FATAL_ERROR_CODE fputs( msg, stderr );putc( '\n', stderr );exit( 1 );
#endif
#ifndef YY_Tlexer_WRAP
#define YY_Tlexer_WRAP yy_wrap
#endif
#ifdef YY_Tlexer_WRAP_PURE
#define YY_Tlexer_WRAP_NOCODE
#endif
#ifndef YY_Tlexer_WRAP_CODE
#define YY_Tlexer_WRAP_CODE return 1;
#endif


#ifndef YY_Tlexer_INHERIT
#define YY_Tlexer_INHERIT
#endif
#ifndef YY_Tlexer_MEMBERS
#define YY_Tlexer_MEMBERS 
#endif
#ifndef YY_Tlexer_CONSTRUCTOR_PARAM
#define YY_Tlexer_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Tlexer_CONSTRUCTOR_CODE
#define YY_Tlexer_CONSTRUCTOR_CODE
#endif
#ifndef YY_Tlexer_CONSTRUCTOR_INIT
#define YY_Tlexer_CONSTRUCTOR_INIT
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class YY_Tlexer_CLASS YY_Tlexer_INHERIT
{
 private:/* data */
 YY_Tlexer_CHAR  *yy_c_buf_p;
 YY_Tlexer_CHAR  yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private: /* functions */
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( YY_Tlexer_CHAR  c, YY_Tlexer_CHAR  *buf_ptr );
 /* use long instead of yy_state_type because it is undef */
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_  ( long current_state_ );
 protected:/* non virtual */
 YY_BUFFER_STATE yy_current_buffer;
 void YY_Tlexer_RESTART ( FILE *input_file );
 void YY_Tlexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer );
 void YY_Tlexer_LOAD_BUFFER_STATE( void );
 YY_BUFFER_STATE YY_Tlexer_CREATE_BUFFER( FILE *file, int size );
 void YY_Tlexer_DELETE_BUFFER( YY_BUFFER_STATE b );
 void YY_Tlexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file );
 protected: /* virtual */
 virtual void YY_Tlexer_ECHO()
#ifdef YY_Tlexer_ECHO_PURE
  =0
#endif
  ;
 virtual int  YY_Tlexer_INPUT(char  *buf,int &result,int max_size)
#ifdef YY_Tlexer_INPUT_PURE
  =0
#endif
  ;
 virtual void  YY_Tlexer_FATAL_ERROR(char *msg)
#ifdef YY_Tlexer_FATAL_ERROR_PURE
  =0
#endif
  ;
 virtual int  YY_Tlexer_WRAP()
#ifdef YY_Tlexer_WRAP_PURE
  =0
#endif
  ;
 public:
 YY_Tlexer_CHAR  *YY_Tlexer_TEXT;
 int YY_Tlexer_LENG;
 FILE *YY_Tlexer_IN, *YY_Tlexer_OUT;
 YY_Tlexer_LEX_RETURN YY_Tlexer_LEX ( YY_Tlexer_LEX_PARAM);
 YY_Tlexer_CLASS(YY_Tlexer_CONSTRUCTOR_PARAM) ;
#if YY_Tlexer_DEBUG != 0
 int YY_Tlexer_DEBUG_FLAG;
#endif
 public: /* added members */
 YY_Tlexer_MEMBERS 
};
#endif



/* declaration of externs for public use of yylex scanner */

/* % here is the declaration from section2 %header{ */ 
