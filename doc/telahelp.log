This is TeX, Version 3.14159 (Web2C 7.3.1) (format=latex 2000.3.25)  14 MAR 2001 16:45
**\nonstopmode\input{telahelp.tex}
(telahelp.tex (/usr/share/texmf/tex/latex/base/article.cls
Document Class: article 1999/09/10 v1.4a Standard LaTeX document class
(/usr/share/texmf/tex/latex/base/size10.clo
File: size10.clo 1999/09/10 v1.4a Standard LaTeX file (size option)
)
\c@part=\count79
\c@section=\count80
\c@subsection=\count81
\c@subsubsection=\count82
\c@paragraph=\count83
\c@subparagraph=\count84
\c@figure=\count85
\c@table=\count86
\abovecaptionskip=\skip41
\belowcaptionskip=\skip42
\bibindent=\dimen102
)
(/usr/lib/sgml-tools/linuxdoc-sgml.sty
Package: linuxdoc-sgml 
) (/usr/lib/sgml-tools/qwertz.sty
\c@definition=\count87
\c@proposition=\count88
\c@lemma=\count89
\c@corollary=\count90
\c@theorem=\count91
)
(/usr/share/texmf/tex/latex/misc/url.sty
Package: url 1999/03/02  ver 1.4  Verb mode for urls, email addresses, and file
 names
)
(/usr/share/texmf/tex/latex/base/inputenc.sty
Package: inputenc 1999/09/17 v0.992 Input encoding file 

(/usr/share/texmf/tex/latex/base/latin1.def
File: latin1.def 1999/09/17 v0.992 Input encoding file 
))
(/usr/share/texmf/tex/latex/base/t1enc.sty
Package: t1enc 1994/06/01 Standard LaTeX package
)
(/usr/share/texmf/tex/generic/babel/babel.sty
Package: babel 1999/09/09 v3.6Z The Babel package


! Package babel Error: You haven't specified a language option.

See the babel package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.112 ...ry to proceed from here, type x to quit.}
                                                  
You need to specify a language, either as a global option
or as an optional argument to the \usepackage command; 
You shouldn't try to proceed from here, type x to quit.

(/usr/share/texmf/tex/generic/babel/babel.def
File: babel.def 1999/09/09 v3.6Z Babel common definitions
\babel@savecnt=\count92
\U@D=\dimen103
))
(/usr/share/texmf/tex/latex/graphics/epsfig.sty
Package: epsfig 1999/02/16 v1.7a (e)psfig emulation (SPQR)

(/usr/share/texmf/tex/latex/graphics/graphicx.sty
Package: graphicx 1999/02/16 v1.0f Enhanced LaTeX Graphics (DPC,SPQR)

(/usr/share/texmf/tex/latex/graphics/keyval.sty
Package: keyval 1999/03/16 v1.13 key=value parser (DPC)
\KV@toks@=\toks14
)
(/usr/share/texmf/tex/latex/graphics/graphics.sty
Package: graphics 1999/02/16 v1.0l Standard LaTeX Graphics (DPC,SPQR)

(/usr/share/texmf/tex/latex/graphics/trig.sty
Package: trig 1999/03/16 v1.09 sin cos tan (DPC)
)
(/usr/share/texmf/tex/latex/config/graphics.cfg)
Package graphics Info: Driver file: dvips.def on input line 80.

(/usr/share/texmf/tex/latex/graphics/dvips.def
File: dvips.def 1999/02/16 v3.0i Driver-dependant file (DPC,SPQR)
))
\Gin@req@height=\dimen104
\Gin@req@width=\dimen105
)
\epsfxsize=\dimen106
\epsfysize=\dimen107
)
(/usr/lib/sgml-tools/null.sty) (telahelp.aux

! Package babel Error: You haven't defined the language english yet.

See the babel package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.2 \select@language{english}
                             
Your command will be ignored, type <return> to proceed


LaTeX Warning: Label `Mapped indexing' multiply defined.


LaTeX Warning: Label `telakka' multiply defined.


LaTeX Warning: Label `m2t' multiply defined.

)
\openout1 = `telahelp.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 27.
LaTeX Font Info:    ... okay on input line 27.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 27.
LaTeX Font Info:    ... okay on input line 27.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 27.
LaTeX Font Info:    ... okay on input line 27.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 27.
LaTeX Font Info:    ... okay on input line 27.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 27.
LaTeX Font Info:    ... okay on input line 27.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 27.
LaTeX Font Info:    ... okay on input line 27.


! Package babel Error: You haven't defined the language english yet.

See the babel package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.27 \begin{document}
                     
Your command will be ignored, type <return> to proceed

LaTeX Font Info:    Try loading font information for T1+cmss on input line 28.
(/usr/share/texmf/tex/latex/base/t1cmss.fd
File: t1cmss.fd 1999/05/25 v2.5h Standard LaTeX font definitions
)
LaTeX Font Info:    Try loading font information for T1+cmtt on input line 28.

(/usr/share/texmf/tex/latex/base/t1cmtt.fd
File: t1cmtt.fd 1999/05/25 v2.5h Standard LaTeX font definitions
)
Underfull \hbox (badness 10000) in paragraph at lines 28--28

 []

LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 28.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line 28.

Underfull \hbox (badness 1052) in paragraph at lines 28--29
\T1/cmss/m/n/10 SGML 'for-mat' com-mand. See also: \T1/cmss/m/it/10 tela-funcs.
html \T1/cmtt/m/n/10 <$file : telafuncs . html$>\T1/cmss/m/n/10 , \T1/cmss/m/it
/10 tela-func-s-Sec-tioned.html
 []

(telahelp.toc)
\tf@toc=\write3
\openout3 = `telahelp.toc'.

 [1

] [2] [3] [4] [5] [6] [7] [8] [9] [10]
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <12> on input line 898.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <8> on input line 898.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <6> on input line 898.
 [11]
Runaway argument?
{$ {]}\label {[} {\rm \begin {tscreen} \begin {verbatim} Special symb\ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! LaTeX Error: \begin{document} ended by \end{verbatim}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1204 }$}
          
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.1204 }$}
          
Things are pretty mixed up, but I think the worst is over.

! Too many }'s.
\endtscreen ->\egroup 
                      \end {quote}
l.1204 }$}
          
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.


! LaTeX Error: \begin{document} ended by \end{quote}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1204 }$}
          
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.1204 }$}
          
Things are pretty mixed up, but I think the worst is over.


! LaTeX Error: \begin{document} ended by \end{tscreen}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1204 }$}
          
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.1204 }$}
          
Things are pretty mixed up, but I think the worst is over.

Runaway argument?
 Special symbols: <[, ]> 
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Besides ordinary array indexing, accomplished with [ ], you c
an use mapped indexing using <[
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 ]>. Assume A is an array with N = rank(A). Assume that I1...IN 
are integer arrays, and that
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 their dimensions mutually agree. Then A<[I1,I2,...,IN]> is a co
llection of A's components, and
 []

[12]
Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Unlike ordinary array indexing, in mapped indexing the size o
f the result is not determined by
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 A, but the size of the index arrays. Mapped indexing can not ea
sily be returned to ordinary
 []

Runaway argument?
 unix> cat mystuff.ct [y] = myfunction(x) /* This does something real\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 The executable mytela is a full Tela plus the C-tela function
s from mystuff.ct. The help
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 command finds the C-style comment /* ... */ following the funct
ion header automatically.
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 Also name completion will recognize myfunction. C-tela code is 
C++ code with one syntactic
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 extention: the function header is simpler and follows Tela conv
entions. There is a
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 preprocessor, named ctpp, which converts C-tela to ordinary C++
 by transforming function
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 headers. Telakka calls ctpp, the system C++ compiler and the li
nker automatically as needed.
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 On systems that support DLD dynamic linking there is a faster
 method to bring your own code
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 in Tela. Just compile the .ct file with telakka -c to produce a
n .o file. Then use the link
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 function in Tela to bring the functions in Tela executable; in 
this way you don't have to
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 generate a full new copy of the kernel. The link function does 
not exist on systems that do
 []

Runaway argument?
 m2t [-h?] (give help) or: m2t [-sd] <file.m >file.t (basic usage) or\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 -F Ignore script files (process Functions only) -S Ignore fun
ction files (process
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 Scripts only) -m Multi-file mode: generate .t files using .m fi
le basenames -s Silent
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 mode, suppress all warnings -d Suppress matrix division warning
s -h, -? Produce this
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 m2t -F *.m >funcs.t Compile all function files into "funcs.t"
 m2t -Sm *.m Compile all
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Many Tela functions can reside in one source file, therefore 
m2t by default writes to standard
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 output. If you want to stick to Matlab convention and use only 
one function per file, you use
 []

[13]
Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 The -F and -S arguments are useful tools for selecting either
 only function M-files or script
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 It is important to realize that m2t is not a full-fledged tra
nslator. You almost always have
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 to edit its input in order to run it suffesfully in Tela. Despi
te this shortcoming, many
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 people have found m2t extremely useful. Particularly, m2t has d
ifficulties in recognizing
 []

Runaway argument?
 a = [1 2 a+3] \end {verbatim} \nopagebreak \hrule \addvspace {\medskipamount \
ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

Runaway argument?
 a = [1,2,a+3]. \end {verbatim} \nopagebreak \hrule \addvspace {\medskipamount 
\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 However, m2t properly recognizes only the second form except 
in some trivial cases.
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 Keep this in mind when writing new M-files. The other weak poin
t is in deciding
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 which symbol is a function and which symbol is a matrix. In Mat
lab, both function
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 calls and array references use (..) parentheses. In Tela array 
refererence must
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 use [..] brackets. m2t does what is possible to guess what is f
unction and what is
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 It is also important to realize that m2t can be misused, i.e.
 it can be used to
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 translate copyrighted M-files to Tela. This is true with any tr
anslator. You as a
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 user are completely responsible for ensuring that copyright is 
not violated when
 []

! Extra }, or forgotten \endgroup.
<argument> ...\par \par \par \par \par \par \par }
                                                  $
l.1204 }$}
          
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <9> on input line 1204.
! Extra }, or forgotten $.
<recently read> }
                 
l.1204 }$}
          
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing } inserted.
<inserted text> 
                }
l.1204 }$}
          
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

Runaway argument?
 Special symbols: [, ] 
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 If A is an array, it can be indexed using A[i,j,...,k]. The n
umber of indices
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 must be equal to rank(A), except that all arrays can be indexed
 using just
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 single index, in which case the array is indexed in flattened f
orm. The
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 flattened indexing is useful e.g. in connection with find(), be
cause find()
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 returns a flattened index vector. Flat indexing is also general
ly faster than
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 The indices may be of three types. 1) integer scalars, 2) int
eger vectors, 3)
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 Void value (notation ':'), which means 'whole range'. The rank 
of the result is
 []

Runaway argument?
 Special symbols: <[, ]> 
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Besides ordinary array indexing, accomplished with [ ], you c
an use mapped
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 indexing using <[ ]>. Assume A is an array with N = rank(A). As
sume that
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 I1...IN are integer arrays, and that their dimensions mutually 
agree. Then
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 A<[I1,I2,...,IN]> is a collection of A's components, and its si
ze is equal to
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Unlike ordinary array indexing, in mapped indexing the size o
f the result is
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 not determined by A, but the size of the index arrays. Mapped i
ndexing can not
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 easily be returned to ordinary indexing, hence it is included a
s a separate
 []

[14]
Runaway argument?
 unix> cat mystuff.ct [y] = myfunction(x) /* This does something real\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 The executable mytela is a full Tela plus the C-tela function
s from mystuff.ct.
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 The help command finds the C-style comment /* ... */ following 
the function
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 header automatically. Also name completion will recognize myfun
ction. C-tela
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 code is C++ code with one syntactic extention: the function hea
der is simpler
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 and follows Tela conventions. There is a preprocessor, named ct
pp, which
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 converts C-tela to ordinary C++ by transforming function header
s. Telakka calls
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 ctpp, the system C++ compiler and the linker automatically as n
eeded. You can
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 pass other object files, libraries and C compilation switches t
o telakka as you
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 On systems that support DLD dynamic linking there is a faster
 method to bring
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 your own code in Tela. Just compile the .ct file with telakka -
c to produce
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 an .o file. Then use the link function in Tela to bring the fun
ctions in Tela
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 executable; in this way you don't have to generate a full new c
opy of the
 []

Runaway argument?
 m2t [-h?] (give help) or: m2t [-sd] <file.m >file.t (basic usage) or\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 -F Ignore script files (process Functions only) -S Ignore fun
ction files
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 (process Scripts only) -m Multi-file mode: generate .t files us
ing .m file
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 basenames -s Silent mode, suppress all warnings -d Suppress mat
rix division
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 m2t -F *.m >funcs.t Compile all function files into "funcs.t"
 m2t -Sm *.m
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 Many Tela functions can reside in one source file, therefore 
m2t by default
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 writes to standard output. If you want to stick to Matlab conve
ntion and use
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 The -F and -S arguments are useful tools for selecting either
 only function
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 It is important to realize that m2t is not a full-fledged tra
nslator. You almost
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 always have to edit its input in order to run it suffesfully in
 Tela. Despite
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 this shortcoming, many people have found m2t extremely useful. 
Particularly, m2t
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 has difficulties in recognizing vectors built without commas. F
or example, in
 []

Runaway argument?
 a = [1 2 a+3] \end {verbatim} \nopagebreak \hrule \addvspace {\medskipamount \
ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

Runaway argument?
 a = [1,2,a+3]. \end {verbatim} \nopagebreak \hrule \addvspace {\medskipamount 
\ETC.
! Paragraph ended before \@xverbatim was complete.
<to be read again> 
                   \par 
l.1204 }$}
          
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 However, m2t properly recognizes only the second form except 
in some
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 trivial cases. Keep this in mind when writing new M-files. The 
other
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 weak point is in deciding which symbol is a function and which 
symbol
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 is a matrix. In Matlab, both function calls and array reference
s use (..)
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 parentheses. In Tela array refererence must use [..] brackets. 
m2t does
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 what is possible to guess what is function and what is variable
, but it
 []

[15]
Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 []\T1/cmtt/m/n/9 It is also important to realize that m2t can be misused, i.e.
 it can be
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 used to translate copyrighted M-files to Tela. This is true wit
h any
 []


Underfull \hbox (badness 10000) in paragraph at lines 1204--1204
 \T1/cmtt/m/n/9 translator. You as a user are completely responsible for ensuri
ng that
 []

! Extra }, or forgotten \endgroup.
<argument> ...\par \par \par \par \par \par \par }
                                                  $
l.1204 }$}
          
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
<recently read> }
                 
l.1204 }$}
          
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.1204 }$}
          
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

)
! Emergency stop.
<*> \nonstopmode\input{telahelp.tex}
                                    
*** (job aborted, no legal \end found)

 
Here is how much of TeX's memory you used:
 1045 strings out of 25901
 11952 string characters out of 197578
 64761 words of memory out of 384000
 3986 multiletter control sequences out of 10000+15000
 16423 words of font info for 39 fonts, out of 400000 for 1000
 14 hyphenation exceptions out of 1000
 33i,6n,21p,237b,1997s stack positions out of 300i,100n,500p,50000b,4000s
Output written on telahelp.dvi (15 pages, 39632 bytes).
